<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

    <http>
        <intercept-url pattern="/"
                       access="hasAnyRole(T(com.victoria.app.core.model.Role).CLIENT, T(com.victoria.app.core.model.Role).OPERATOR, T(com.victoria.app.core.model.Role).MANAGER,T(com.victoria.app.core.model.Role).THIRD_PARTY_SPECIALIST, T(com.victoria.app.core.model.Role).ADMIN)"/>
        <form-login login-page="/login" default-target-url="/welcome" always-use-default-target="true" authentication-failure-url="/login?error" username-parameter="username" password-parameter="password"/>
    </http>

    <authentication-manager alias="authenticationManager">
        <authentication-provider user-service-ref="userDetailsServiceImpl">
            <password-encoder ref="encoder"/>
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="userDetailsServiceImpl"
                class="com.victoria.app.core.service.impl.UserDetailsServiceImpl"/>



<!--    BCrypt implements OpenBSD-style Blowfish password hashing using the scheme described in "A Future-Adaptable Password Scheme" by Niels Provos and David Mazieres.-->
<!--    This password hashing system tries to thwart off-line password cracking using a computationally-intensive hashing algorithm, based on Bruce Schneier's Blowfish cipher. The work factor of the algorithm is parameterised, so it can be increased as computers get faster.-->
<!--    Usage is really simple. To hash a password for the first time, call the hashpw method with a random salt, like this:-->
<!--    String pw_hash = BCrypt.hashpw(plain_password, BCrypt.gensalt());-->
<!--    To check whether a plaintext password matches one that has been hashed previously, use the checkpw method:-->
<!--    if (BCrypt.checkpw(candidate_password, stored_hash)) System.out.println("It matches"); else System.out.println("It does not match");-->
<!--    The gensalt() method takes an optional parameter (log_rounds) that determines the computational complexity of the hashing:-->
<!--    String strong_salt = BCrypt.gensalt(10) String stronger_salt = BCrypt.gensalt(12)-->
<!--    The amount of work increases exponentially (2**log_rounds), so each increment is twice as much work. The default log_rounds is 10, and the valid range is 4 to 31.-->
<!--    Author:-->
<!--    Damien Miller-->
    <beans:bean id="encoder"
                class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <beans:constructor-arg name="strength" value="11"/>
    </beans:bean>
</beans:beans>